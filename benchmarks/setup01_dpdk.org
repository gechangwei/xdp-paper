* Notes for DPDK setup
  :PROPERTIES:
  :CUSTOM_ID: notes-for-dpdk-setup
  :END:

DPDK is needed for both comparison testing against XDP and for having a
faster packet generator.

Tariq reports that using DPDK based T-rex, he can send with 125Mpps
(multi-TXq + CPU cores).

* Fedora packages
  :PROPERTIES:
  :CUSTOM_ID: fedora-packages
  :END:

Fedora comes with DPDK packaged:

#+BEGIN_EXAMPLE
    dnf install dpdk dpdk-tools
    dnf install dpdk-devel dpdk-doc
    dnf install python-pyelftools
#+END_EXAMPLE

First run had issues with dependencies:

#+BEGIN_EXAMPLE
    $ sudo dpdk-pmdinfo
    Traceback (most recent call last):
     File "/bin/dpdk-pmdinfo", line 14, in <module>
       from elftools.common.exceptions import ELFError
    ImportError: No module named elftools.common.exceptions
#+END_EXAMPLE

Missing deps on python-pyelftools :

#+BEGIN_EXAMPLE
    sudo dnf install python-pyelftools
#+END_EXAMPLE

* Setup DPDK based trex
  :PROPERTIES:
  :CUSTOM_ID: setup-dpdk-based-trex
  :END:

It's possible to download binary version of trex, and install that from
a tar.gz file, see instructions here:

#+BEGIN_QUOTE
  [[https://trex-tgn.cisco.com/trex/doc/trex_manual.html#_download_and_installation]]
#+END_QUOTE

Generate config:

#+BEGIN_EXAMPLE
    sudo ./dpdk_setup_ports.py -c 09:00.0 09:00.1 -o trex_cfg02.yaml
    sudo ./dpdk_setup_ports.py -i
#+END_EXAMPLE

* Mellanox requires out-of-tree drivers
  :PROPERTIES:
  :CUSTOM_ID: mellanox-requires-out-of-tree-drivers
  :END:

[[http://www.mellanox.com/page/products_dyn?product_family=26&mtag=linux_sw_drivers]]

-  Download for Fedora
   27: ::
  [[http://www.mellanox.com/page/mlnx_ofed_eula?mtag=linux_sw_drivers&mrequest=downloads&mtype=ofed&mver=MLNX_OFED-4.3-1.0.1.0&mname=MLNX_OFED_LINUX-4.3-1.0.1.0-fc27-x86_64.tgz]]

Installing:

: sudo ./mlnxofedinstall --with-mft --with-mstflint --dpdk --upstream-libs --without-dkms --user-space-only

** Fedora 27 install experience

The recent F27 kernel is too new.

#+BEGIN_EXAMPLE
$ sudo ./mlnxofedinstall
Logs dir: /tmp/MLNX_OFED_LINUX.1498.logs
General log file: /tmp/MLNX_OFED_LINUX.1498.logs/general.log
The 4.16.13-200.fc27.x86_64 kernel is installed, MLNX_OFED_LINUX does not have drivers available for this kernel.
You can run mlnx_add_kernel_support.sh in order to to generate an MLNX_OFED_LINUX package with drivers for this kernel.
Or, you can provide '--add-kernel-support' flag to generate an MLNX_OFED_LINUX package and automatically start the installation.
#+END_EXAMPLE

Not much success with ./mlnx_add_kernel_support.sh script.  Note that
create_mlnx_ofed_installers.pl IS located in same directory.

#+BEGIN_EXAMPLE
$ sudo ./mlnx_add_kernel_support.sh --kernel `uname -r`
WARNING: create_mlnx_ofed_installers.pl is missing, cannot build a repository.
ERROR: Path to MLNX_OFED/mlnx-en directory is not defined.
#+END_EXAMPLE

Install RPM tool dependencies:

#+BEGIN_EXAMPLE
  sudo dnf install createrepo
  sudo dnf install python2-devel redhat-rpm-config rpm-build
#+END_EXAMPLE

Try using mlnxofedinstall --add-kernel-support option:

#+BEGIN_EXAMPLE
 $ sudo ./mlnxofedinstall --add-kernel-support
Note: This program will create MLNX_OFED_LINUX TGZ for fc27 under /tmp/MLNX_OFED_LINUX-4.3-1.0.1.0-4.16.13-200.fc27.x86_64 directory.
See log file /tmp/MLNX_OFED_LINUX-4.3-1.0.1.0-4.16.13-200.fc27.x86_64/mlnx_ofed_iso.5306.log

Checking if all needed packages are installed...
Building MLNX_OFED_LINUX RPMS . Please wait...

ERROR: Failed executing "MLNX_OFED_SRC-4.3-1.0.1.0/install.pl --tmpdir /tmp/MLNX_OFED_LINUX-4.3-1.0.1.0-4.16.13-200.fc27.x86_64 --kernel-only --kernel 4.16.13-200.fc27.x86_64 --kernel-sources /lib/modules/4.16.13-200.fc27.x86_64/build --builddir /tmp/MLNX_OFED_LINUX-4.3-1.0.1.0-4.16.13-200.fc27.x86_64/mlnx_iso.5306 --disable-kmp --build-only --distro fc27"
ERROR: See /tmp/MLNX_OFED_LINUX-4.3-1.0.1.0-4.16.13-200.fc27.x86_64/mlnx_ofed_iso.5306.log
Failed to build MLNX_OFED_LINUX for 4.16.13-200.fc27.x86_64
#+END_EXAMPLE

Digging throug the RPM build errors, this compile error is the cause:

#+BEGIN_EXAMPLE
  CC [M]  /tmp/MLNX_OFED_LINUX-4.3-1.0.1.0-4.16.13-200.fc27.x86_64/mlnx_iso.5306/OFED_topdir/BUILD/mlnx-ofa_kernel-4.3/obj/default/drivers/net/ethernet/mellanox/mlx5/core/ipo
ib/ipoib_vlan.o
/tmp/MLNX_OFED_LINUX-4.3-1.0.1.0-4.16.13-200.fc27.x86_64/mlnx_iso.5306/OFED_topdir/BUILD/mlnx-ofa_kernel-4.3/obj/default/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c: In f
unction 'parse_tc_fdb_actions':
/tmp/MLNX_OFED_LINUX-4.3-1.0.1.0-4.16.13-200.fc27.x86_64/mlnx_iso.5306/OFED_topdir/BUILD/mlnx-ofa_kernel-4.3/obj/default/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c:2173:
18: error: implicit declaration of function 'tcf_mirred_ifindex'; did you mean 'tcf_mirred_dev'? [-Werror=implicit-function-declaration]
    int ifindex = tcf_mirred_ifindex(a);
                  ^~~~~~~~~~~~~~~~~~
                  tcf_mirred_dev
#+END_EXAMPLE

Install package 'tk' due to dependency (weird).

Try with Toke's command:

#+BEGIN_EXAMPLE
$ sudo ./mlnxofedinstall --with-mft --with-mstflint --dpdk --upstream-libs --without-dkms --user-space-only
Logs dir: /tmp/MLNX_OFED_LINUX.11926.logs/general.log
General log file: /tmp/MLNX_OFED_LINUX.10238.logs/general.log
Unsupported package: dkms
This program will install the MLNX_OFED_LINUX package on your machine.
Note that all other Mellanox, OEM, OFED, RDMA or Distribution IB packages will be removed.
Those packages are removed due to conflicts with MLNX_OFED_LINUX, do not reinstall them.
#+END_EXAMPLE

It auto updates firmware:

#+BEGIN_EXAMPLE
  Device Type:      ConnectX5
  Part Number:      MCX556A-EDA_Ax
  Description:      ConnectX-5 Ex VPI adapter card; EDR IB (100Gb/s) and 100GbE; dual-port QSFP28; PCIe4.0 x16; tall bracket; ROHS R6
  PSID:             MT_0000000009
  PCI Device Name:  01:00.0
  Base MAC:         ec0d9adb11bc
  Versions:         Current        Available     
     FW             16.20.1010     16.22.1002    
     PXE            3.5.0210       3.5.0403      
     UEFI           N/A            14.15.0019    

 [...]
  Device Type:      ConnectX3Pro
  Part Number:      MCX354A-FCC_Ax
  Description:      ConnectX-3 Pro VPI adapter card; dual-port QSFP; FDR IB (56Gb/s) and 40GigE;PCIe3.0 x8 8GT/s;RoHS R6
  PSID:             MT_1090111019
  PCI Device Name:  02:00.0
  Port1 MAC:        f452147a58f1
  Port2 GUID:       f4521403007a58f2
  Versions:         Current        Available     
     FW             2.36.5000      2.42.5000     
     PXE            3.4.0718       3.4.0752      
#+END_EXAMPLE


* What does Red Hat perf team use
  :PROPERTIES:
  :CUSTOM_ID: what-does-red-hat-perf-team-use
  :END:

From: Andrew Theurer
<[[mailto:atheurer@redhat.com][atheurer@redhat.com]]> :

#+BEGIN_EXAMPLE
    We are using TRex, with our own scripts for the binary-search.  All of our
    scripts are here: https://github.com/atheurer/trafficgen

    First, install trex: install-trex.sh
    Next, configure/launch trex: launch-trex.sh
    Finally, run a test: binary-search.py

    We recommend using Intel XL710 or XVV710 adapters to drive traffic.  Intel
    Niantic will work, but it does not filter incoming packets reliably, so we
    can't get per-stream stats.
#+END_EXAMPLE

** setup issues
   :PROPERTIES:
   :CUSTOM_ID: setup-issues
   :END:

Manually created file for trex and could start it with:

#+BEGIN_QUOTE
  sudo ./launch-trex.sh --yaml-file=/etc/trex\_cfg02-ixgbe.yaml
#+END_QUOTE

* Running basic T-rex packet generator
Given a correctly configured T-rex with a config file in /etc/trex-cfg.yaml,
start the t-rex daemon:

: sudo ./t-rex-64 -c 6 -i

where the =-c= argument is the number of threads to run (max is =num_cores= -2,
as t-rex uses two threads to do other work).

Then, launch the t-rex console in a separate window:

: ./trex-console

and from within the console run the benchmark script as follows:

: start -f stl/udp_for_benchmarks.py -t packet_len=64,stream_count=12 --port 0 -m 100mpps

The =packet_len= and =stream_count= parameters are passed to the python script,
the =-m= switch sets the rate T-rex will (attempt to) run at (various units
available, see the online console help).

The other window will show the status as the test is running. To stop, simple
run =stop= in the console.

The =udp_for_benchmarks.py= script can run multiple streams, but the version
included with t-rex will run all streams with the same packets (i.e., port
numbers), which is not what we want if we are going to test multiple cores. The
modified version below will run each stream on a separate port (starting from
dstport 12); also set the dst IP appropriately according to the testbed setup.

#+BEGIN_SRC python
from trex_stl_lib.api import *

# Tunable example
#
#trex>profile -f stl/udp_for_benchmarks.py
#
#Profile Information:
#
#
#General Information:
#Filename:         stl/udp_for_benchmarks.py
#Stream count:          1
#
#Specific Information:
#Type:             Python Module
#Tunables:         ['stream_count = 1', 'direction = 0', 'packet_len = 64']
#
#trex>start -f stl/udp_for_benchmarks.py -t  packet_len=128 --port 0
#

class STLS1(object):
    '''
    Generalization of udp_1pkt_simple, can specify number of streams and packet length
    '''
    def create_stream (self, packet_len, stream_count):
        packets = []
        for i in range(stream_count):
            base_pkt = Ether()/IP(src="16.0.0.1",dst="10.70.2.2")/UDP(dport=12+i,sport=1025)
            base_pkt_len = len(base_pkt)
            base_pkt /= 'x' * max(0, packet_len - base_pkt_len)
            packets.append(STLStream(
                packet = STLPktBuilder(pkt = base_pkt),
                mode = STLTXCont()
                ))
        return packets

    def get_streams (self, direction = 0, packet_len = 64, stream_count = 1, **kwargs):
        # create 1 stream
        return self.create_stream(packet_len - 4, stream_count)


# dynamic load - used for trex console or simulator
def register():
    return STLS1()
#+END_SRC

* Setting up flow rules to send packets to different cores
To avoid issues with hash collisions in hardware RX queue steering, this script
can be used to setup manual flow rules for a range of UDP ports:

#+BEGIN_SRC sh
#!/bin/sh
IFACE=ens3f1
START_PORT=12
NUM_RINGS=$(ethtool -n $IFACE| egrep '[0-9]+ RX rings available' | cut -f 1 -d ' ')

for ring in $(seq 0 $(($NUM_RINGS - 1))); do
    port=$((START_PORT + $ring))
    ethtool -N $IFACE flow-type udp4 dst-port $port action $ring
done
#+END_SRC
